:toc: macro
toc::[]

= OASP4J adding custom functionality

In the link:OASP4JLayers[previous chapter] we have seen that using _Cobigen_ we can generate in a few _clicks_ all the structure and functionality of an _Oasp4j_ component.

In this chapter we are going to show how to add custom functionalities in our projects that are out of the scope of the code that _Cobigen_ is able to cover.

== The requirement

The _Jump the Queue_ design defines a link:JumpTheQueueDesign#user-story-register[User Story] in which a visitor can register into an event and obtain an access code to avoid a queue.

In our _standard_ implementation of the _Jump the queue_ app we have used _Cobigen_ to generate the components, so we have a default implementation of the services where saving a visitor returns the visitor data as confirmation that the process ended successfully.

We are going to create a new service `/register`, to register a visitor and return both the visitor data and the access code.

We also are going to create the logic to generate the access code.

== Creating the service

To add the new service we need to add the definition to the `visitormanagement/service/api/rest/VisitormanagementRestService.java`. We are going to create a new `/register` _REST_ resource bound to a method that we will call _registerVisitor_.

[NOTE]
====
We could also re-write the current _saveVisitor_ method, but for clarity sake we are generating a new service.
====

[source,java]
----
  @POST
  @Path("/register/")
  public VisitorCto registerVisitor(VisitorEto visitor);
----

Then we need to implement the new _registerVisitor_ method in `visitormanagement/service/impl/rest/VisitormanagementRestServiceImpl.java` class.

[source,java]
----
  @Override
  public VisitorCto registerVisitor(VisitorEto visitor) {
    return this.visitormanagement.registerVisitor(visitor);
  }
----

[NOTE]
====
The compilation error that we get in _this.visitormanagement.registerVisitor_ is because the logic for the new functionality is not added yet. We are going to fix it in the next step.
====

== Adding the logic

Now we need to create the logic for the new _registerVisitor_ method. To do so, as always, we must add the definition to `visitormanagement/logic/api/Visitormanagement.java` class

[source,java]
----
VisitorCto registerVisitor(VisitorEto visitor);
----

and then implement the method in `visitormanagement/logic/impl/VisitormanagementImpl.java`

[source,java]
----
  @Override
  public VisitorCto registerVisitor(VisitorEto visitor) {

    Objects.requireNonNull(visitor, "visitor");
    VisitorEntity visitorEntity = getBeanMapper().map(visitor, VisitorEntity.class);
    // initialize, validate visitorEntity here if necessary
    AccessCodeEntity code = new AccessCodeEntity();
    code.setCode(this.accesscode.generateCode(new Random(), 3));
    code.setDateAndTime(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));
    visitorEntity.setCode(code);
    VisitorEntity savedVisitor = getVisitorDao().save(visitorEntity);

    VisitorCto cto = new VisitorCto();
    cto.setVisitor(getBeanMapper().map(savedVisitor, VisitorEto.class));
    cto.setCode(getBeanMapper().map(this.accesscode.findAccessCode(savedVisitor.getCodeId()), AccessCodeEto.class));
    return cto;
  }
----

[NOTE]
====
we are using `java.sql.Timestamp` for _Timestamp_ and `java.util.Random` for _Random_
====

To solve the compilation errors we need to add the implementation to generate the code in the _accesscodemanagement_ component. *The details about the code generation are not important* you can implement it with your own preferences. We have created a simple generation code that returns 3 random characters.

The definition:

.Accesscodemanagement.java
[source,java]
----
String generateCode(Random rng, int length);
----

The implementation:

.AccesscodemanagementImpl.java:
[source,java]
----
  @Override
  public String generateCode(Random rng, int length) {

    String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    char[] text = new char[length];
    for (int i = 0; i < length; i++) {
      text[i] = characters.charAt(rng.nextInt(characters.length()));
    }
    return new String(text);
  }
----

and finally we need to inject the _accesscode_ component in the `VisitormanagementImpl.java` class.

[source,java]
----
  @Inject
  private Accesscodemanagement accesscode;
----

As _date and Time_ we are setting the current date plus one day. Again, *that details are not important* for the goal of the exercise, do it in other way if you feel more comfortable.

In addition to that we are defining a _VisitorCto_ to handle the response. We need to provide the _access code_ in the response. In the previous chapter we talked about the link:OASP4jLayers#transfer-objects[Transfer Objects]. In this case the _VisitorEto_ has this defintion:

[source,java]
----
  private String name;

  private String email;

  private String phone;

  private Long codeId;
----

So instead of the _AccessCode_ object we only have the _id_ as reference and we can not use this object in the response. 

Now take a look at the _VisitorCto_ definition:

[source,java]
----
  private VisitorEto visitor;

  private AccessCodeEto code;
----

In this case we have the complete _AccessCodeEto_ object available to be part of the response.

For that reason we are returning a _VisitorCto_ object, because it can contain the complete _code_ data in addition to the _visitor's_ data.

The `getBeanMapper().map()` is the _Oasp4j_ mapper to automate the mappings to that objects. 

As last implementation steps we are saving the _visitor entity_ in the database and finally returning the _VisitorCto_.

We are using the default `save` method, so we don't need to add any extra implementation to the _dataaccess_ layer.

== Testing the new functionality

Run the app using Eclipse (_SpringBootApp.java > Right click > Java Application_).

Call our new registration service (POST) `http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/register` providing in the body a _Visitor_ object again

----
{
	"name": "Mary",
	"email": "mary@mail.com",
	"phone": "1234567"
}
----

Now the response includes the _Access Code_ info

image::images/oasp4j/6.Customizations/jumpthequeue_accesscode.png[, link="images/oasp4j/6.Customizations/jumpthequeue_accesscode.png"]

In this chapter we have seen how easy is extend a _Oasp4j_ application, with few steps you can add new services to your backend app to fit the functional requirements of your projects.

=== link:OASP4jValidations[Next chapter: Validations in Oasp4j]
:toc: macro
toc::[]

= An OASP4J Application

== My Thai Star basics
As an example of how an OASP4J application is built we are going to show the _My Thai Star_ application backend project, that can be found https://github.com/devonfw/my-thai-star[in github].

The _My Thai Star_ application is a solution for managing the online booking and orders of a restaurant, it is addressed as a showcase app but designed with real requirements although trying to serve as example of common use cases in web apps (master-detail model, login, authorization based on roles, pagination, search with filters, etc.).

image::images/mythaistar/mts.png[,width="450", link="images/mythaistar/mts.png"]

The main features of the app are:

- anonymous users can book a table.

- anonymous users can create an event and invite some friends to the restaurant.

- users can visit the meal catalog and see information about the available dishes (name, ingredients, picture, price). 

- both, the host and the guests, can order food for the event based on the food catalog and can select dishes with extra ingredients.

- all the booking and order creation / cancellation operations are related to mail notifications sent by the application to warn the involved users about the changes.

- only users with role _waiter_ are able to access to a restricted area of the application to have access to a list with all of the bookings and orders and can access to the details of each one.

- the waiters can filter the bookings/orders results to manage the list.

== My Thai Star Oasp4j Backend overview

What we have shown in the previous section is the aspect of a My Thai Star client app that consumes the services created with the _Oasp4j_ server solution.

From now on we are going to focus on the implementation of that server project to show how is it formed and how you can create your own _Oasp4j_ server project with the Devon framework.

My Thai Star project is hosted https://github.com/devonfw/my-thai-star[on github] and includes different technologies such as _Java_, _.Net_ and _Node_ for backend solutions and _Angular_ and _Xamarin_ as default clients.

[NOTE]
====
*Where are we going to store the mythaistar app? in the Devon distribution? in a public repo?*
====

=== The Oasp4j project

Using the _Oasp4j_ approach for the Java backend project we will have a structure of a main _Maven_ project formed by two sub-projects:

image::images/mythaistar/project_modules.png[,width="250", link="images/mythaistar/project_modules.png"]

In the _core_ project we will store all the logic and functionality of the application.

The _server_ project configures the packaging of the application.

=== The components

In early chapters we have mentioned that the Oasp4j applications should be divided in different components that will provide the functionality for the different features of the application. The naming convention to define a Oasp4j component will be

----
[Target]management
----

Being the _Target_ the main _entity_ that we want to manage.

The components, as part of the logic of the app, are located in the _core_ project of the app.

E.g. in My Thai Star we need to show the different available *dishes*, we need to manage the *booking* and the *orders* and we need to create new *users*. So the application will be divided in the following components:

image::images/mythaistar/project_components.png[,width="250", link="images/mythaistar/project_components.png"]

- dishmanagement: This component will manage the dishes information retrieving it from the db and serving it to the client. It also could be used to create new menus.

- bookingmanagement: Manages the booking part of the application. With this component the users (anonymous/logged in) can create new reservations or cancel an existing reservation. The users with waiter role can see all scheduled reservations.

- ordermanagement: This component handles the process to order dishes (related to reservations). A user (as a host or as a guest) can create orders (that contain dishes) or cancel an existing one. The users with waiter role can see all ordered orders.

- usermanagement: Takes care of the User Profile management, allowing to create and update the data profiles.

Apart from that components we will have other _packages_ for the cross-cutting concerns:

- general: is a package that stores the common elements or configurations of the app, like _security_ configuration.

- imagemanagement: in case of functionalities that will be used in several components, instead of duplicate the functionality (code) we can extract it to a component that the other components will consume. In the case of the images, as both _dishmanagement_ and _usermanagement_ components are going to need to manage images, this _imagecomponent_ will be used for that purpose.

- mailservice: with this service we will provide the functionality for sending email notifications. This is a shared service between different app components such as _bookingmanagement_ or _ordercomponent_.

=== The component structure (layers)

Each component of the app is internally divided following the three-layer architecture that Oasp4j proposes. So we will have three different packages to order our component's elements:

image::images/mythaistar/component_layers.png[,width="250", link="images/mythaistar/component_layers.png"]

- Service Layer: will expose the REST api to exchange information with client applications.

- Logic Layer: the layer in charge of hosting the business logic of the application.

- Data Access Layer: the layer to communicate with the data base.

=== Communication between layers



:toc: macro
toc::[]

== Build your own OASP4Js application
In this chapter we are going to see how to build a new OASP4Js from scratch. The proposal of this tutorial is to end having enough knowledge of Angular and the rest of technologies regarding OASP4Js to know how to start developing on it and if you want more advanced and specific functionalities see them on the cookbook.

== Result of the tutorial: Jump The Queue
This mock-up images shows what you are going to have as a result when the tutorial is finished. An app to manage codes assigned to queuers in order to easy the management of the queue, with a code, you can jump positions in queue and know everywhere which is your position.

image::images/oasp4js/3.BuildYourOwn/JTQ_register.png[,width="250", link="images/oasp4js/3.BuildYourOwn/JTQ_register.png"]
image::images/oasp4js/3.BuildYourOwn/JTQ_codeview.png[,width="250", link="images/oasp4js/3.BuildYourOwn/JTQ_codeview.png"]
image::images/oasp4js/3.BuildYourOwn/JTQ_queue.png[,width="250", link="images/oasp4js/3.BuildYourOwn/JTQ_queue.png"]

So, hands on it, let's configure the environment and build this app!

== Installing global tools
=== Visual Code: 
To install the editor download the installer from https://code.visualstudio.com/Download[the official page] and install it.

Once installed, the first thing you should do is install the extensions that will help you during the development, to do that follow this steps:

1. Install Settings Sync extension.

2. Open the command palette (Ctrl+Shift+P) and introduce the command: *Sync: Download Settings*.

Provide GIST ID: *d976bc200f0403d8045b7e4ee39d4361*.

In the case that you are unable to set up the extensions using the method mentioned, you can also use the scripts provided in https://github.com/oasp/oasp-vscode-ide[this repository].

=== Node.js

Go to the https://nodejs.org/en/[node.js official page] and download the version you like the most, the LTS or the Current, as you wish.

The recommendation is to install the latest version of your election, but keep in mind that to use Angular CLI your version must be at least 6.9, so if you have a node.js already installed in your computer this is a good moment to check your version and upgrade it if it's necessary.

=== TypeScript

Let’s install what is going to be the main language during development: TypeScript. This ES6 superset is tightly coupled to the Angular framework and will help us to get a final clean and distributable JavaScript code. This is installed globally with npm, the package manager used to install and create javascript modules in Node.js, that is installed along with Node, so for install typescript you don’t have to install npm explicitly, only run this command:

`npm install –g typescript`

=== Yarn

As npm, https://yarnpkg.com/en/[Yarn] is a package manager, the differences are that Yarn is quite more faster and usable, so we decided to use it to manage the dependencies of Oasp4Js projects.

To install it you only have to go to https://yarnpkg.com/en/docs/install[the official installation page] and follow the instructions.

Even though, if you feel more confortable with npm, you can remain using npm, there is no problem regarding this point.

=== Angular/CLI
CLI specially built for make Angular projects easier to develop, maintain and deploy, so we are going to make use of it.

To install it you have to run this command in your console prompt: `npm install –g @angular/cli`

Then, you should be able to run `ng version` and this will appear in the console:

image::images/oasp4js/3.BuildYourOwn/angularcli.JPG[, link="images/oasp4js/3.BuildYourOwn/angularcli.JPG"]

In addition, you can set Yarn as the default package manager to use with Angular/CLI running this command: 

`ng set --global packageManager=yarn`

Finally, once all this tools have been installed successfully, you are ready to create a new project.

== Creating basic new project

One of the best reasons to install Angular/CLI is because it has a feature that creates a whole new basic project where you want just running in the folder you want to store the app:

`ng new <project name>`

Where <project name> is the name of the project you want to create. In this case, we are going to call it Oasp4JsSample. This command will create the basic files and install the dependencies stored in `package.json`

image::images/oasp4js/3.BuildYourOwn/ngnew.JPG[, link="images/oasp4js/3.BuildYourOwn/ngnew.JPG"]

Then, if we move to the folder of the project we have just created and open visual code we will have something like this:

image::images/oasp4js/3.BuildYourOwn/filesnew.JPG[, link="images/oasp4js/3.BuildYourOwn/filesnew.JPG"]

Finally, it is time to check if the created project works properly. To do this, move to the projects root folder and run: `ng serve -o`

And... it worked:

image::images/oasp4js/3.BuildYourOwn/appnew.JPG[, link="images/oasp4js/3.BuildYourOwn/appnew.JPG"]

== Adding Google Material and Covalent Teradata

First, we are going to add *Google Material* to project dependencies running the following commands:

  `yarn add @angular/material`

Then we are going to add animations:

  `yarn add @angular/animations`

Finally, some material components need gestures support, so we need to add this dependency:

  `yarn add hammerjs`

That is all regarding Angular/Material. We are now going to install *Covalent Teradata* dependency:

  `yarn add @covalent/core` 

Now that we have all dependencies we can check in the project's package.json file if everything has been correctly added:

image::images/oasp4js/3.BuildYourOwn/installedpackages.JPG[, link="images/oasp4js/3.BuildYourOwn/installedpackages.JPG"]

Now let's continue to make some config modifications to have all the styles and modules imported to use Material and Teradata:

1. Angular Material need this two modules to work: `MaterialModule`, `BrowserAnimationsModule`. So make sure you import them in the _imports array_ inside of _app.module.ts_. Coming from @angular/material and @angular/platform-browser/animations respectively.

2. Create theming.scss, a file to config themes on the app, we will use one _primary_ color, one secondary, called _accent_ and another one for _warning_. Also Teradata accepts a foreground and background color. Go to _/src_ into the project and create a file called *theme.scss* and it content will be like this:

[source, javascript]
----
@import '~@angular/material/theming';
@import '~@covalent/core/theming/all-theme';

@include mat-core();

$primary: mat-palette($mat-blue, 700);
$accent:  mat-palette($mat-orange, 800);

$warn:    mat-palette($mat-red, 600);

$theme: mat-light-theme($primary, $accent, $warn);

$foreground: map-get($theme, foreground);
$background: map-get($theme, background);

@include angular-material-theme($theme);
@include covalent-theme($theme);
----

3. Now we have to add these styles in angular/CLI config. Go to _.angular-cli.json_ to "styles" array and add theme and Covalent platform.css to make it look like this:

[source, javascript]
----
      "styles": [
        "styles.css",
        "theme.scss",
        "../node_modules/@covalent/core/common/platform.css"
      ],
----

With all of this finally done, we are ready to start the development.

== ng-seed

Another option to get this basic project structure with all its dependencies and styles already set is to clone the develop-covalent branch of https://github.com/oasp/oasp4js-ng-project-seed/tree/develop-covalent[ng-project-seed].

Once you have cloned it, move to the project root folder and run a `yarn` to install all dependencies from package.json. The project serves as an example which also comes with some common functionalities already implemented if you want to use them.

In order to make the task easier, we are going to avoid the removal of unused components, so we will use the project created on the previous point to build the app.

== Start the development

Now we have a fully functional blank project, all we have to do now is just create the components and services which will compose the application.

First, we are going to develop the views of the app, trough its components, and then we will create the services with the logic, security and back-end connection.

=== Creating components

[NOTE]
====
Learn more about creating new components in OASP4Js link:AngularComponents#create-a-new-component[HERE]
====

The app consists in 3 main views:

* Access
* Code viewer
* List of the queue

To navigate between them we are going to implement routes to the components in order to use Angular Router.

To see our progress, move to the root folder of the project and run `ng serve` this will serve our client app in _localhost:4200_ and keeps watching for changing, so whenever we modify the code, the app will automatically reload.

==== Root component
_app.component_ will be our Root component, so we do not have to create any component yet, we are going to use it to add to the app the elements that will be common no matter in what view we are.

[NOTE]
====
Learn more about the root component in OASP4Js link:AngularComponents#root-component[HERE]
====

This is the case of a header element, which will be on top of the window and on top of all the components, let's build it:

The first thing to know is about https://teradata.github.io/covalent/#/layouts[Covalent Layouts] because we are going to use it a lot, one for every view component.

[NOTE]
====
Learn more about layouts in OASP4Js link:AngularComponents#teradata-layouts[HERE]
====

As we do not really need nothing more than a header we are going to use the simplest layout: *nav view*

Remember that we need to add to _app.module_ every component of Covalent Teradata we use, for layouts it is CovalentLayoutModule:

[source, javascript]
----
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    CovalentLayoutModule, // Covalent Teradata Layout Module
    MaterialModule,
    BrowserAnimationsModule,
    FormsModule,
    HttpModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
----

[NOTE]
====
Remember this step because you will have to repeat it for every other component from Teradata you use in your app.
====

Now we can use layouts, so lets use it on _app.component.html_ to make it look like this:

[source, html]
----
<td-layout-nav>               // Layout tag
  <div td-toolbar-content>
    Jump The Queue            // Header container
  </div>
  <h1>
    {{title}}                 // Main content
  </h1>
</td-layout-nav>
----

[NOTE]
====
Learn more about toolbars in OASP4Js link:AngularComponents#toolbars[HERE]
====

Once this done, our app should have a header and the "app works!" should remain in the body of the page:

image::images/oasp4js/3.BuildYourOwn/root_header.JPG[,width="250", link="images/oasp4js/3.BuildYourOwn/root_header.JPG"]

The thing is the body of the Root component should be the *output of the router*, so now it is time to prepare the routing system.

First we need to create a component to show as default, that will be our access view, later on we will modify it on it's section of this tutorial, but for now we just need to have it: stop the `ng serve` and run `ng generate component access`. It will add a folder to our project with all the files needed for a component. Now we can move on to the router task again. Run `ng serve` again to continue the development.

Let's create the file when the Router check for routes to navigate between components.

1. Create a file called _app.routes.ts_ and add the following code:

[source, typescript]
----
imports...

const routes: Routes = [  // Routes string, where Router will check the navigation and its properties.
  { path: 'access', component: AccessComponent},               // Redirect if url path is /access.
  { path: '**', redirectTo: '/access', pathMatch: 'full' }];  // Redirect if url path do not match with any other route.

export const appRoutes: ModuleWithProviders = RouterModule.forRoot(routes); // Export of the routing module.
----

Time to add this _appRoutes_ routing module to the app module:

[source, typescript]
----
...
  imports: [
    BrowserModule,
    appRoutes,
    CovalentLayoutModule,
...
----

[NOTE]
====
Learn more about routing in OASP4Js link:AngularComponents#routing[HERE]
====

Finally, we remove the "{{title}}" from _app.component.html_ and in its place we put a `<router-outlet></router-outlet>` tag. So the final result of our Root component will look like this:

image::images/oasp4js/3.BuildYourOwn/root_router.JPG[,width="250", link="images/oasp4js/3.BuildYourOwn/root_router.JPG"]

As you can see, now what is in the body is the html of *AccessComponent*, this is because we told the Router to redirect to Access when the path is /access, but also, redirect to it as default if any of the other routes match with the path introduced.

We will definitely going to modify the header in the future to add some options like log-out or navigation arrows but, for the moment, this is all regarding Root Component.

==== AccessComponent

As we have already created this component from the section before, let's move on to the creation of the access view.

First, we need to add the Covalent Layout and the card:

[source, html]
----
<td-layout>
  <md-card>
    <md-card-title>Access</md-card-title>
  </md-card>
</td-layout>
----

This will add a grey background to the view and a card on of it with the title: "Access", now that we have the basic structure of the view, lets add the form with the information to access to our queue number:

* Name of the person
* Email
* Telephone number

One simple text field, one text field with email validation (and the legal information regarding emails) and a number field. Moreover, we are going to add this image:

image::images/oasp4js/3.BuildYourOwn/jumpthequeue.png[,width="250", link="images/oasp4js/3.BuildYourOwn/jumpthequeue.png"]

In order to have it available in the project to show, save it in the following path of the project: _/src/assets/images/_ and it has been named: _jumpthequeue.png_

So the final code with the form added will look like this:

[source, html]
----
<td-layout>
  <md-card>
    <img md-card-image src="assets/images/jumpthequeue.png">
    <md-card-title>Access</md-card-title>
    <form layout="column" class="pad" #accessForm="ngForm">

      <md-input-container>
        <input mdInput placeholder="Name" ngModel name="name" required>
      </md-input-container>

      <md-input-container>
        <input mdInput placeholder="Email" ngModel email name="email" required>
      </md-input-container>
      <span class="text-sm">Filling this, I acccept to receive commercial information.</span>

      <md-input-container>
        <input mdInput placeholder="Phone" type="number" ngModel name="phone" required>
      </md-input-container>

    <md-card-actions>
      <button md-raised-button color="primary" [disabled]="!accessForm.form.valid" class="text-upper">Request it</button>
    </md-card-actions>

    </form>
  </md-card>
</td-layout>
----

This forms contains three input container from Material and inside of them, the input with the properties to make them from each type listed above and to be all required.

Also, we need to add the button to send the information and redirect to code viewer or show an error if something went wrong in the process, but for the moment, as we neither have another component nor the auth service yet, we will implement the button visually and the validator to disable it if the form is not correct, but not the click event, we will come back later to make this working.

[NOTE]
====
Learn more about forms in OASP4Js link:AngularComponents#forms[HERE]
====

This code will give us as a result something similar to this:

image::images/oasp4js/3.BuildYourOwn/access_form.JPG[,width="250", link="images/oasp4js/3.BuildYourOwn/access_form.JPG"]

Now lets continue with the second component: Code viewer.

Out first step will be create the component in the exact same way we did with the access component: `ng generate component code-viewer` and we add the route in the app.routes.ts:

[source, typescript]
----
const routes: Routes = [
  { path: 'access', component: AccessComponent},
  { path: 'code', component: CodeViewerComponent}, //code-viewer route added
  { path: '**', redirectTo: '/access', pathMatch: 'full' }];
----

With two components already created we need to use the router to navigate between them. Following the application flow of events, we are going to add a navigate function to the submit button of our access form button, so when we press it, we will be redirected our code viewer.

Turning back to _access.component.html_ we add this to the code:

[source, html]
----
<form layout="column" class="pad" (ngSubmit)="submitAccess()" #accessForm="ngForm"> // added a ngSubmit event
 ...
<button md-raised-button type="submit" color="primary" ... </button> // added type="submit"
----

This means that when the user press enter or click the button, ngSubmit will send an event to the function `submitAccess()` that should be in the _access.component.ts_, which is going to be created now:

[source, typescript]
----
  constructor(private router: Router) { }

  submitAccess() {
    this.router.navigate(['code']);
  }
----

We inject an instance of Router object and declare it into the name _router_ in order to use it into the code, as we did on submitAccess(), using the navigate function and redirecting to the next view, in our case, the code-viewer we just created using the route we defined in _app.routes.ts_.

Now we have a minimum of navigation flow into our application, this specific navigation will be secured later on to check the access data and to forbid any navigation trough the URL of the browser.

Let's move on to _code-viewer_ to made the template of the component. We need a big code in the middle and a button to move to the queue:

[source, html]
----
<td-layout>
  <md-card>
    <img md-card-image src="assets/images/jumpthequeue.png">
    <md-card-title>Queue code for {{name}} is:</md-card-title> // interpolation of the variable name which corresponds with the person who requested the code

    <h1 style="font-size: 100px" class="text-center text-xxl push-lg">{{code}}</h1> // queue code for that person

    <div class="text-center pad-bottom-lg">
      <button md-raised-button (click)="navigateQueue()" color="primary" class="text-upper">Watch the queue</button> // navigation function like access
    </div>

  </md-card>
</td-layout>
----

And the implementation of the _code-viewer.component.ts_ should be something like: 

[source, typescript]
----
imports...

export class CodeViewerComponent implements OnInit {

  code: string; // declaration of vars used in the template
  name: string;

  constructor(private router: Router) { } // instance of Router

  ngOnInit() {
    this.code = 'Q06';        //This values in the future will be loaded from a service making a call for server information
    this.name = 'Someone';
  }

  navigateQueue() {
                           // this will be filled with the router navigate function when we have created the queue component
  }
----

Giving this as a result:

image::images/oasp4js/3.BuildYourOwn/code_viewer.JPG[,width="250", link="images/oasp4js/3.BuildYourOwn/code_viewer.JPG"]

==== Code viewer component
==== Queue component
=== Creating services
==== Access service
==== Auth service
==== Guard service
==== Queue service
== Making calls to server
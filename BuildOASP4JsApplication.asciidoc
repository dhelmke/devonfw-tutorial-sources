:toc: macro
toc::[]

== Build your own OASP4Js application
In this chapter we are going to see how to build a new OASP4Js from scratch. The proposal of this tutorial is to end having enough knowledge of Angular and the rest of technologies regarding OASP4Js to know how to start developing on it and if you want more advanced and specific functionalities see them on the cookbook.

== Result of the tutorial: Jump The Query
This mock-up images shows what you are going to have as a result when the tutorial is finished. An app to manage codes assigned to queuers in order to easy the management of the queue, with a code, you can jump positions in queue and know everywhere, which is your position.

image::images/oasp4js/3.BuildYourOwn/JTQ_register.png[,width="250", link="images/oasp4js/3.BuildYourOwn/JTQ_register.png"]
image::images/oasp4js/3.BuildYourOwn/JTQ_codeview.png[,width="250", link="images/oasp4js/3.BuildYourOwn/JTQ_codeview.png"]
image::images/oasp4js/3.BuildYourOwn/JTQ_queue.png[,width="250", link="images/oasp4js/3.BuildYourOwn/JTQ_queue.png"]

So, hands on it, let's configure the environment and build this app!

== Installing global tools
=== Visual Code: 
To install the editor download the installer from https://code.visualstudio.com/Download[the official page] and install it.

Once installed, the first thing you should do is install the extensions that will help you during the development, to do that follow this steps:

1. Install Settings Sync extension.

2. Open the command palette (Ctrl+Shift+P) and introduce the command: *Sync: Download Settings*.

Provide GIST ID: *d976bc200f0403d8045b7e4ee39d4361*.

In the case that you are unable to set up the extensions using the method mentioned, you can also use the scripts provided in https://github.com/oasp/oasp-vscode-ide[this repository].

=== Node.js

Go to the https://nodejs.org/en/[node.js official page] and download the version you like the most, the LTS or the Current, as you wish.

The recommendation is to install the latest version of your election, but keep in mind that to use Angular CLI your version must be at least 6.9, so if you have a node.js already installed in your computer this is a good moment to check your version and upgrade it if it's necessary.

=== TypeScript

Let’s install what is going to be the main language during development: TypeScript. This ES6 superset is tightly coupled to the Angular framework and will help us to get a final clean and distributable JavaScript code. This is installed globally with npm, the package manager used to install and create javascript modules in Node.js, that is installed along with Node, so for install typescript you don’t have to install npm explicitly, only run this command:

`npm install –g typescript`

=== Yarn

As npm, https://yarnpkg.com/en/[Yarn] is a package manager, the differences are that Yarn is quite more faster and usable, so we decided to use it to manage the dependencies of Oasp4Js projects.

To install it you only have to go to https://yarnpkg.com/en/docs/install[the official installation page] and follow the instructions.

Even though, if you feel more confortable with npm, you can remain using npm, there is no problem regarding this point.

=== Angular/CLI
CLI specially built for make Angular projects easier to develop, maintain and deploy, so we are going to make use of it.

To install it you have to run this command in your console prompt: `npm install –g @angular/cli`

Then, you should be able to run `ng version` and this will appear in the console:

image::images/oasp4js/3.BuildYourOwn/angularcli.JPG[, link="images/oasp4js/3.BuildYourOwn/angularcli.JPG"]

In addition, you can set Yarn as the default package manager to use with Angular/CLI running this command: 

`ng set --global packageManager=yarn`

Finally, once all this tools have been installed successfully, you are ready to create a new project.

== Creating basic new project

One of the best reasons to install Angular/CLI is because it has a feature that creates a whole new basic project where you want just running in the folder you want to store the app:

`ng new <project name>`

Where <project name> is the name of the project you want to create. In this case, we are going to call it Oasp4JsSample. This command will create the basic files and install the dependencies stored in `package.json`

image::images/oasp4js/3.BuildYourOwn/ngnew.JPG[, link="images/oasp4js/3.BuildYourOwn/ngnew.JPG"]

Then, if we move to the folder of the project we have just created and open visual code we will have something like this:

image::images/oasp4js/3.BuildYourOwn/filesnew.JPG[, link="images/oasp4js/3.BuildYourOwn/filesnew.JPG"]

Finally, it is time to check if the created project works properly. To do this, move to the projects root folder and run: `ng serve -o`

And... it worked:

image::images/oasp4js/3.BuildYourOwn/appnew.JPG[, link="images/oasp4js/3.BuildYourOwn/appnew.JPG"]

== Adding Google Material and Covalent Teradata

First, we are going to add *Google Material* to project dependencies running the following commands:

  `yarn add @angular/material`

Then we are going to add animations:

  `yarn add @angular/animations`

Finally, some material components need gestures support, so we need to add this dependency:

  `yarn add hammerjs`

That is all regarding Angular/Material. We are now going to install *Covalent Teradata* dependency:

  `yarn add @covalent/core` 

Now that we have all dependencies we can check in the project's package.json file if everything has been correctly added:

image::images/oasp4js/3.BuildYourOwn/installedpackages.JPG[, link="images/oasp4js/3.BuildYourOwn/installedpackages.JPG"]

Now let's continue to make some config modifications to have all the styles and modules imported to use Material and Teradata:

1. Angular Material need this two modules to work: `MaterialModule`, `BrowserAnimationsModule`. So make sure you import them in the _imports array_ inside of _app.module.ts_. Coming from @angular/material and @angular/platform-browser/animations respectively.

2. Create theming.scss, a file to config themes on the app, we will use one _primary_ color, one secondary, called _accent_ and another one for _warning_. Also Teradata accepts a foreground and background color. Go to _/src_ into the project and create a file called *theme.scss* and it content will be like this:

[source, javascript]
----
@import '~@angular/material/theming';
@import '~@covalent/core/theming/all-theme';

@include mat-core();

$primary: mat-palette($mat-orange, 800);
$accent:  mat-palette($mat-light-blue, 600, A100, A400);

$warn:    mat-palette($mat-red, 600);

$theme: mat-light-theme($primary, $accent, $warn);

@include angular-material-theme($theme);
@include covalent-theme($theme);
----

3. Now we have to add these styles in angular/CLI config. Go to _.angular-cli.json_ to "styles" array and add theme and Covalent platform.css to make it look like this:

[source, javascript]
----
      "styles": [
        "styles.css",
        "theme.scss",
        "../node_modules/@covalent/core/common/platform.css"
      ],
----

With all of this finally done, we are ready to start the development.

== ng-seed

Another option to get this basic project structure with all its dependencies and styles already set is to clone the develop-covalent branch of https://github.com/oasp/oasp4js-ng-project-seed/tree/develop-covalent[ng-project-seed].

Once you have cloned it, move to the project root folder and run a `yarn` to install all dependencies from package.json. The project serves as an example which also comes with some common functionalities already implemented if you want to use them.

In order to make the task easier, we are going to avoid the removal of unused components, so we will use the project that we created on the previous point to build the app.

== Start the development

Now we have a fully functional blank project, all we have to do now is just create the components and services which will compose the application.

First, we are going to develop the views of the app, trough its components, and then we will create the services with the logic, security and back-end connection.

=== Creating components
=== Creating services
== Making calls to server
:toc: macro
toc::[]

= devon4j details : the component layers

As we already mentioned in the link:devon4j-overview#devon4j-architecture-overview[introduction to devon4j] the components of our _Java_ backend apps will be divided in three layers: _service_, _logic_ and _dataaccess_.

* _Service_ Layer: will contain the REST services to exchange information with the client applications.

* _Logic_ Layer: the layer in charge of hosting the logic of the application (validations, authorization control, business logic, etc.).

* _Data Access_ Layer: the layer to communicate with the data base.


== Layers implementation

image::images/devon4j/5.Layers/dependency_injection.png[,width="250", link="images/devon4j/5.Layers/dependency_injection.png"]

Following the https://github.com/devonfw/devon4j/wiki/guide-dependency-injection[devon4j recommendations] for _Dependency Injection_ in MyThaiStar's layers we will find:

- Separation of API and implementation: Inside each layer we will separate the elements in different packages: _api_ and _impl_. The _api_ will store the _interface_ with the methods definition and inside the _impl_ we will store the class that implements the _interface_.

image::images/devon4j/5.Layers/layer_api_impl.png[, link="images/devon4j/5.Layers/layer_api_impl.png"]

- Usage of JSR330: The Java standard set of annotations for _dependency injection_ (`@Named`, `@Inject`, `@PostConstruct`, `@PreDestroy`, etc.) provides us with all the needed annotations to define our beans and inject them.

[source, java]
----
@Named
public class MyBeanImpl implements MyBean {
  @Inject
  private MyOtherBean myOtherBean;

  @PostConstruct
  public void init() {
    // initialization if required (otherwise omit this method)
  }

  @PreDestroy
  public void dispose() {
    // shutdown bean, free resources if required (otherwise omit this method)
  }
}
----

=== Communication between layers

The communication between layers is solved using the described _Dependency Injection_ pattern, based on _Spring_ and the _Java_ standards: _java.inject_ (JSR330) combined with JSR250.

image::images/devon4j/5.Layers/layers_impl.png[, link="images/devon4j/5.Layers/layers_impl.png"]

==== Service layer - Logic layer
[source,java]
----
import javax.inject.Inject;
import javax.inject.Named;

import io.oasp.application.mtsj.bookingmanagement.logic.api.Bookingmanagement;

@Named("BookingmanagementRestService")
public class BookingmanagementRestServiceImpl implements BookingmanagementRestService {

  @Inject
  private Bookingmanagement bookingmanagement;

  @Override
  public BookingCto getBooking(long id) {
    return this.bookingmanagement.findBooking(id);
  }

  ...

}
----

==== Logic layer - Data Access layer

[source,java]
----
import javax.inject.Inject;
import javax.inject.Named;

import io.oasp.application.mtsj.bookingmanagement.dataaccess.api.dao.BookingDao;

@Named
public class BookingmanagementImpl extends AbstractComponentFacade implements Bookingmanagement {

  @Inject
  private BookingDao bookingDao;

  @Override
  public boolean deleteBooking(Long bookingId) {
   
    BookingEntity booking = this.bookingDao.find(bookingId);
    this.bookingDao.delete(booking);
    return true;
  }

  ...

}
----


=== Service layer

As we mentioned at the beginning, the _Service_ layer is where the services of our application (REST or SOAP) will be located.

In _devon4j_ applications the default implementation for web services is based on http://cxf.apache.org/[Apache CXF], a services framework for Java apps that supports web service standards like _SOAP_ (implementing https://en.wikipedia.org/wiki/Java_API_for_XML_Web_Services[JAX-WS]) and _REST_ services (https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services[JAX-RS]).

In this tutorial we are going to focus only in the _REST_ implementation of the services.

==== Service definition

The services definition is done by the service _interface_ located in the `service.api.rest` package. In the _boooking_ component of _My Thai Star_ application we can see a service definition statement like the following


[source,java]
----
@Path("/bookingmanagement/v1")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface BookingmanagementRestService {

  @GET
  @Path("/booking/{id}/")
  public BookingCto getBooking(@PathParam("id") long id);

  ...

}
----

*JAX-RS annotations*:

- _@Path_: defines the common path for all the resources of the service.

- _@Consumes_ and _@Produces_: declares the type of data that the service expects to receive from the client and the type of data that will return to the client as response.

- _@GET_: annotation for _HTTP_ _get_ method.

- _@Path_: the path definition for the _getBooking_ resource.

- _@PathParam_: annotation to configure the _id_ received in the _url_ as a parameter.




==== Service implementation

The service implementation is a class located in the `service.impl.rest` package that implements the previous defined interface.

[source,java]
----
@Named("BookingmanagementRestService")
public class BookingmanagementRestServiceImpl implements BookingmanagementRestService {

  @Inject
  private Bookingmanagement bookingmanagement;

  @Override
  public BookingCto getBooking(long id) {

    return this.bookingmanagement.findBooking(id);
  }

  ...
}
----

As you can see this layer simply delegates in the _logic_ layer to resolve the app requirements regarding business logic.

=== Logic layer

In this layer we will store all the custom implementations to resolve the requirements of our applications. Including:

- business logic.

- Delegation of the https://en.wikipedia.org/wiki/Business_transaction_management[transaction management] to Spring framework.

- object mappings.

- validations.

- authorizations.

Within the _logic_ layer we must avoid including code related to services or data access, we must delegate those tasks in the suitable layer.


==== Logic layer definition

As in the _service_ layer, the logic implementation will be defined by an interface located in a `logic.api` package.

[source,java]
----
public interface Bookingmanagement {

  BookingCto findBooking(Long id);

  ...
}
----

==== Logic layer implementation

In a `logic.impl` package a _Impl_ class will implement the interface of the previous section.

[source,java]
----
@Named
@Transactional
public class BookingmanagementImpl extends AbstractComponentFacade implements Bookingmanagement {

  /**
   * Logger instance.
   */
  private static final Logger LOG = LoggerFactory.getLogger(BookingmanagementImpl.class);

  /**
   * @see #getBookingDao()
   */
  @Inject
  private BookingDao bookingDao;

  /**
   * The constructor.
   */
  public BookingmanagementImpl() {

    super();
  }

  @Override
  public BookingCto findBooking(Long id) {

    LOG.debug("Get Booking with id {} from database.", id);
    BookingEntity entity = getBookingDao().findOne(id);
    BookingCto cto = new BookingCto();
    cto.setBooking(getBeanMapper().map(entity, BookingEto.class));
    cto.setOrder(getBeanMapper().map(entity.getOrder(), OrderEto.class));
    cto.setInvitedGuests(getBeanMapper().mapList(entity.getInvitedGuests(), InvitedGuestEto.class));
    cto.setOrders(getBeanMapper().mapList(entity.getOrders(), OrderEto.class));
    return cto;
  }

  public BookingDao getBookingDao() {
    return this.bookingDao;
  }

  ...
}
----

In the above _My Thai Star_ logic layer example we can see:

- business logic and/or https://github.com/devonfw/devon4j/wiki/guide-beanmapping[object mappings].

- Delegation of the transaction management through the Spring's `@Transactional` annotation.

=== Transfer objects

In the code examples of the _logic_ layer section you may have seen a _BookingCto_ object. This is one of the https://github.com/devonfw/devon4j/wiki/guide-transferobject[Transfer Objects] defined in _devon4j_ to be used as transfer data element between layers.

Main benefits of using _TO's_:

- Avoid inconsistent data (when entities are sent across the app changes tend to take place in multiple places).

- Define how much data to transfer (relations lead to transferring too much data).

- Hide internal details.

In _devon4j_ we can find two different _Transfer Objects:

==== Entity Transfer Object (ETO)

- Same data-properties as entity.

- No relations to other entities.

- Simple and solid mapping.

==== Composite Transfer Object(CTO)

- No data-properties at all.

- Only relations to other TOs.

- 1:1 as reference, else Collection(List) of TOs.

- Easy to manually map reusing ETO's and CTO's.


=== Data Access layer

The third, and last, layer of the _devon4j_ architecture is the one responsible for store all the code related to connection and access to data base.

For mapping java objects to the data base _devon4j_ use the http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html[Java Persistence API(JPA)]. And as _JPA_ implementation _devon4j_ use http://hibernate.org/orm/[hibernate].

Apart from the _Entities_ of the component, in the _dataaccess_ layer we are going to find the same elements that we saw in the other layers: definition (an _interface_) and implementation (a class that implements that interface).

However, in this layer the implementation is slightly different, the `[Target]DaoImpl` extends `general.dataaccess.base.dao.ApplicationDaoImpl` that provides us (through `io.oasp.module.jpa`) with the basic implementation _dataaccess_ methods: `save(Entity)`, `findOne(id)`, `findAll(ids)`, `delete(id)`, etc.

Because of that, in the `[Target]DaoImpl` implementation of the layer we only need to add the _custom_ methods that are not implemented yet. Following the _My Thai Star_ component example (_bookingmanagement_) we will find only the paginated _findBookings_ implementation.

==== Data Access layer definition

[source,java]
----
public interface BookingDao extends ApplicationDao<BookingEntity> {
  PaginatedListTo<BookingEntity> findBookings(BookingSearchCriteriaTo criteria);
}
----

==== Data Access layer implementation

[source,java]
----
@Named
public class BookingDaoImpl extends ApplicationDaoImpl<BookingEntity> implements BookingDao {

  @Override
  public PaginatedListTo<BookingEntity> findBookings(BookingSearchCriteriaTo criteria) {
    
    BookingEntity booking = Alias.alias(BookingEntity.class);
    EntityPathBase<BookingEntity> alias = Alias.$(booking);
    JPAQuery query = new JPAQuery(getEntityManager()).from(alias);

    ...

  }
}
----

The implementation of the _findBookings_ uses http://www.querydsl.com/[queryDSL] to manage the dynamic queries.


=== Layers of the Jump the Queue application

All the above sections describe the main elements of the layers of the _devon4j_ components. If you have completed the link:devon4j-components[exercise of the previous chapter] you may have noticed that all those components are already created for us by _Cobigen_.

Take a look to our application structure

*visitor component core (without relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_core.png[,width="350", link="images/devon4j/5.Layers/jumpthequeue_structure_core_.png"]

- 1. Definition for _dataaccess_ layer repository.

- 2. The entity that we created to be used by _Cobigen_ to generate the component structure.

- 3. Definition of _abstract usecase_ in the _logic_ layer.

- 4. Implementation of the _usecasefind_ layer in the _logic_ layer.

- 5. Implementation of the _usecasemanage_ layer in the _logic_ layer.

- 6. Implementation of the _logic_ layer.

- 7. Implementation of the _rest service_.

*visitor component api (without relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_api.png[,width="350", link="images/devon4j/5.Layers/jumpthequeue_structure_api_.png"]

- 1. definition for _entity_ in the api layer.

- 2. Entity Transfer Object located in the api layer.

- 3. Search Criteria Transfer Object located in the api layer.

- 4. Definition of _usecasefind_ in the _logic_ layer.

- 5. Definition of _usecasemanage_ in the _logic_ layer.

- 6. Definition of the _logic_ layer.

- 7. Definition of the _rest service_ of the component.

For the _queue_ component you will find a similar structure.

The component _access code_ will have a similar structure adding some differences since it has some relations with visitor and queue.

*access code component core (with relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_core_cto.png[,width="350", link="images/devon4j/5.Layers/jumpthequeue_structure_api_cto.png"]

Theres only a single difference in the core, if you look closely, cobigen didnt generate the _usecasemanage_ implementation. This is due to complexity of the entities with relations.
In this case cobigen will leave us to create the save and delete methods so we can properly adress them.

*access code component api (with relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_api_cto.png[,width="350", link="images/devon4j/5.Layers/jumpthequeue_structure_api_cto.png"]

Theres two differences here:
  
  1. As you can see cobigen generated a cto for our entity with relations

  2. Like we explained in the core, the _usecasemanage_ definition is missing.

So, as you can see, our components have all the layers defined and implemented following the _devon4j_ principles.

Using _Cobigen_ we have created a complete and functional _devon4j_ application without the necessity of any manual implementation except for more complex entities which will be explained to the next chapter.

Let's see the application running and let's try to use the REST service to save a new visitor.

=== Jump the Queue running

As we already mentioned, for this tutorial we are using https://www.getpostman.com/[Postman] app for desktop, but you can use any other similar tool to test your API.

First, open your _Jump the Queue_ project in Eclipse and run the app (right click over the _SpringBootApp.java class > Run as > Java application)

==== Simple call

If you remember link:devon4j-components#mock-data[we added some mock data] to have some visitors info available, let's try to retrieve a visitor's information using our _visitormanagement service_.

Call the service (GET) `http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor/1/` to obtain the data of the visitor with _id_ 1.

image::images/devon4j/5.Layers/jumpthequeue_simpeGet1.png[, link="images/devon4j/5.Layers/jumpthequeue_simpeGet1.png"]

Instead of receiving the visitor's data we get a response with the login form. This is because the _devon4j_ applications, by default, implements the _Spring Security_ so we would need to log in to access to the services.

To ease the example we are going to "open" the application to avoid the security filter and we are going to enable the https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[CORS] filter to allow requests from clients (Angular).

In the file `general/service/impl/config/BaseWebSecurityConfig.java`:

- edit the `configure(HttpSecurity http)` method, comment the http request filter and authorize every request to allow access to the app to any request:

[source,java]
----
@Override
public void configure(HttpSecurity http) throws Exception {

  http.authorizeRequests().anyRequest().permitAll().and().csrf().disable();

  if (this.corsEnabled) {
    http.addFilterBefore(getCorsFilter(), CsrfFilter.class);
  }
}
----

Finally in the file `/jtqj-core/src/main/resources/application.properties` set `security.cors.enabled` to true

----
security.cors.enabled=true
----

Now run again the app and try again the same call. We should obtain the data of the visitor

image::images/devon4j/5.Layers/jumpthequeue_simpeGet2.png[, link="images/devon4j/5.Layers/jumpthequeue_simpeGet2.png"]


==== Paginated response

_Cobigen_ has created for us a complete services related to our entities so we can access to a paginated list of the visitors without any extra implementation.

We are going to use the following service defined in `visitormanagement/service/api/rest/VisitormanagementRestService.java`
[source,java]
----
	@Path("/visitor/search")
	@POST
	public Page<VisitorEto> findVisitors(VisitorSearchCriteriaTo searchCriteriaTo);
----

The service definition states that we will need to provide a _Search Criteria Transfer Object_. This object will work as a filter for the search as you can see in `visitormanagement/dataaccess/api/repo/VisitorRepository.java` in _findByCriteria_ method.

If the _Search Criteria_ is empty we will retrieve all the visitors, in other case the result will be filtered.

Call the service POST: `http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor/search`

in the body we need to define the _SearchCriteria_ object, that will have a pageable defined:

[source,json]
----
{
	"pageable" : {
		"pageNumber" : "0",
		"pageSize": "10"
	}
}
----

Make sure, the header `Content-Type: application/json` is passed as well indicating the server to interprete the body in JSON format and check "raw". Otherwise, you may face an 415 unsuported type error. 

[NOTE]
====
You can see the definition of the _SearchCriteriaTo_ in `visitormanagement/logic/api/to/VisitorSearchCriteriaTo.java`
====

The result will be in the Headers section something like

image::images/devon4j/5.Layers/jumpthequeue_paginated1.png[, link="images/devon4j/5.Layers/jumpthequeue_paginated1.png"]

If we want to filter the results we can define a _criteria_ object in the body. Instead of previous empty criteria, if we provide an object like

[source,json]
----
{
	"username": "test1@mail.com",
	"pageable" : {
		"pageNumber" : "0",
		"pageSize": "10"
	}
}
----

we will filter the results to find only visitors with username _test1@mail.com_. If now we repeat the request the result will be

image::images/devon4j/5.Layers/jumpthequeue_paginated2.png[, link="images/devon4j/5.Layers/jumpthequeue_paginated2.png"]

We could customize the filter editing the `visitormanagement/logic/impl/usecase/UcFindVisitorImpl.java` class.

==== Saving a visitor

To fit the requirements of the related https://github.com/devonfw/devonfw-tutorial-sources/wiki/JumpTheQueueDesign#user-story-register[user story] we need to register a _visitor_ and return an _access code_.

By default _Cobigen_ has generated for us the _Read_ operation in the _UcFindEntityImpl_ and rest of the _CRUD_ in _UcManageEntityImpl_. So we already are able to read, update, delete and create a visitor in our database without extra implementation.

To delegate in _Spring_ to manage the _transactions_ we only need to add the `@Transactional` annotation to our _usecase_  implementations. Since _devonfw 2.2.0_ _Cobigen_ adds this annotation automatically, so we don't need to do it manually. Check your logic implementation classes and add the annotation in case it is not present.

[source,java]
----

@Named
@Validated
@Transactional
public class UcManageVisitorImpl extends AbstractVisitorUc implements UcManageVisitor {
  ...
}
----

To save a visitor we only need to use the _REST_ resource `/services/rest/visitormanagement/v1/visitor` and provide in the body the visitor definition for the _VisitorEto_.


[NOTE]
====
You can see the definition for _VisitorEto_ in `visitormanagement/logic/api/to/VisitorEto.java`
====

So, call (POST) `http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor` providing in the body a _Visitor_ object like

[source,json]
----
{
	"username": "mary@mail.com",
	"name": "Mary",
	"phoneNumber": "1234567",
	"password": "12345",
	"acceptedCommercial": "true",
	"acceptedTerms": "true",
	"userType": "false"
}
----


We will get a result like the following

image::images/devon4j/5.Layers/jumpthequeue_saveVisitor.png[, link="images/devon4j/5.Layers/jumpthequeue_saveVisitor.png"]

In the body of the response we can see the default content for a successful service response: the data of the new visitor. This is the default implementation when saving a new _entity_ with _devon4j_ applications. However, the _Jump the Queue_ design defines that the response must provide the _access code_ created for the user, so we will need to change the logic of our application to fit this requirement.

In the next chapter we will see how we can customize the code generated by _Cobigen_ to adapt it to our necessities.

=== Next chapter: link:devon4j-adding-custom-functionality[ Customizing an devon4j project]